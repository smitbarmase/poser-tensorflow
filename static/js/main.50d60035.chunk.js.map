{"version":3,"sources":["components/App.js","index.js"],"names":["App","useState","webcam","setWebcam","model","setModel","predictions","setPredictions","lightColors","normalColors","predict","useCallback","a","canvas","prediction","i","getTotalClasses","push","name","className","probability","toFixed","loop","update","window","requestAnimationFrame","handleWebcam","document","getElementById","getContext","clearRect","width","height","stop","tmImage","useEffect","setup","play","startWebcam","URL","then","id","onClick","disabled","map","index","length","style","ReactDOM","render"],"mappings":"wWAmIeA,EAhIH,WAAO,IAAD,EACYC,mBAAS,MADrB,mBACTC,EADS,KACDC,EADC,OAEUF,mBAAS,MAFnB,mBAETG,EAFS,KAEFC,EAFE,OAGsBJ,mBAAS,MAH/B,mBAGTK,EAHS,KAGIC,EAHJ,KAKVC,EAAc,CAClB,YACA,eACA,aACA,aACA,eACA,eAGIC,EAAe,CACnB,aACA,gBACA,cACA,cACA,gBACA,gBAGIC,EAAUC,sBAAW,sBAAC,gCAAAC,EAAA,0DACtBV,IAAUE,EADY,gCAECA,EAAMM,QAAQR,EAAOW,QAFtB,OAIxB,IAFMC,EAFkB,OAGlBR,EAAc,GACXS,EAAI,EAAGA,EAAIX,EAAMY,kBAAmBD,IAC3CT,EAAYW,KAAK,CACfC,KAAMJ,EAAWC,GAAGI,UACpBC,YAAaN,EAAWC,GAAGK,YAAYC,QAAQ,KAGnDd,EAAeD,GAVS,2CAYzB,CAACJ,EAAQE,IAENkB,EAAOX,sBAAW,sBAAC,sBAAAC,EAAA,6DACvBV,EAAOqB,SADgB,SAEjBb,IAFiB,OAGvBc,OAAOC,sBAAsBH,GAHN,2CAItB,CAACpB,EAAQQ,IAENgB,EAAY,uCAAG,4BAAAd,EAAA,0DACfV,EADe,uBAEbW,EAASc,SAASC,eAAe,UAC3Bf,EAAOgB,WAAW,MACxBC,UAAU,EAAG,EAAGjB,EAAOkB,MAAOlB,EAAOmB,QAJxB,SAKX9B,EAAO+B,OALI,OAMjB9B,EAAU,MANO,uBAQjBA,EAAU,IAAI+B,SAAe,IAAK,KAAK,IARtB,4CAAH,qDAiClB,OArBAC,qBAAU,WACJjC,EACe,uCAAG,sBAAAU,EAAA,sEACZV,EAAOkC,QADK,uBAEZlC,EAAOmC,OAFK,OAGlBb,OAAOC,sBAAsBH,GAC7BpB,EAAOW,OAASc,SAASC,eAAe,UAJtB,2CAAH,oDAMjBU,GAEA/B,EAAe,QAEhB,CAACL,EAAQoB,IAEZa,qBAAU,WAIRD,OAFiBK,sEACGA,0EACgBC,MAAK,SAACpC,GAAD,OAAWC,EAASD,QAC5D,IAGD,qBAAKe,UAAU,2DAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,2CAAf,UACE,qBAAKA,UAAU,UAAf,qBACA,wBACEsB,GAAG,SACHV,MAAM,MACNC,OAAO,MACPb,UAAU,0BAGd,wBACEuB,QAAShB,EACTP,UAAS,yDACPjB,EAAS,eAAiB,gBADnB,YAELE,EAAQ,mBAAqB,6BACjCuC,UAAWvC,EALb,SAOGA,EAASF,EAAS,OAAS,QAAW,qBAG1CI,GACC,sBAAKa,UAAU,gDAAf,UACE,qBAAKA,UAAU,UAAf,qBACA,qBAAKA,UAAU,YAAf,SACGb,EAAYsC,KAAI,WAAwBC,GAAxB,IAAG3B,EAAH,EAAGA,KAAME,EAAT,EAASA,YAAT,OACf,sBAAiBD,UAAU,YAA3B,UACE,qBAAKA,UAAU,0BAAf,SAA0CD,IAC1C,qBACEC,UAAS,mCACPX,EAAYqC,EAAQrC,EAAYsC,SAFpC,SAKE,qBACE3B,UAAS,kBACPV,EAAaoC,EAAQpC,EAAaqC,SAEpCC,MAAO,CAAEhB,MAAqB,IAAdX,EAAoB,WAXhCyB,iBCpG1BG,IAASC,OAAO,cAAC,EAAD,IAAStB,SAASC,eAAe,W","file":"static/js/main.50d60035.chunk.js","sourcesContent":["import { useEffect, useState, useCallback } from \"react\";\nimport * as tmImage from \"@teachablemachine/image\";\n\nconst App = () => {\n  const [webcam, setWebcam] = useState(null);\n  const [model, setModel] = useState(null);\n  const [predictions, setPredictions] = useState(null);\n\n  const lightColors = [\n    \"bg-red-50\",\n    \"bg-yellow-50\",\n    \"bg-blue-50\",\n    \"bg-pink-50\",\n    \"bg-purple-50\",\n    \"bg-green-50\",\n  ];\n\n  const normalColors = [\n    \"bg-red-300\",\n    \"bg-yellow-300\",\n    \"bg-blue-300\",\n    \"bg-pink-300\",\n    \"bg-purple-300\",\n    \"bg-green-300\",\n  ];\n\n  const predict = useCallback(async () => {\n    if (webcam && model) {\n      const prediction = await model.predict(webcam.canvas);\n      const predictions = [];\n      for (let i = 0; i < model.getTotalClasses(); i++) {\n        predictions.push({\n          name: prediction[i].className,\n          probability: prediction[i].probability.toFixed(2),\n        });\n      }\n      setPredictions(predictions);\n    }\n  }, [webcam, model]);\n\n  const loop = useCallback(async () => {\n    webcam.update();\n    await predict();\n    window.requestAnimationFrame(loop);\n  }, [webcam, predict]);\n\n  const handleWebcam = async () => {\n    if (webcam) {\n      let canvas = document.getElementById(\"canvas\");\n      var ctx = canvas.getContext(\"2d\");\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      await webcam.stop();\n      setWebcam(null);\n    } else {\n      setWebcam(new tmImage.Webcam(300, 300, true));\n    }\n  };\n\n  useEffect(() => {\n    if (webcam) {\n      const startWebcam = async () => {\n        await webcam.setup();\n        await webcam.play();\n        window.requestAnimationFrame(loop);\n        webcam.canvas = document.getElementById(\"canvas\");\n      };\n      startWebcam();\n    } else {\n      setPredictions(null);\n    }\n  }, [webcam, loop]);\n\n  useEffect(() => {\n    const URL = \"https://teachablemachine.withgoogle.com/models/_btPzUnuE/\";\n    const modelURL = URL + \"model.json\";\n    const metadataURL = URL + \"metadata.json\";\n    tmImage.load(modelURL, metadataURL).then((model) => setModel(model));\n  }, []);\n\n  return (\n    <div className=\"bg-gray-200 h-screen w-full flex flex-col justify-center\">\n      <div className=\"mx-auto w-min flex space-x-4\">\n        <div className=\"space-y-4\">\n          <div className=\"bg-white rounded-md shadow p-4 space-y-4\">\n            <div className=\"text-lg\">Preview</div>\n            <canvas\n              id=\"canvas\"\n              width=\"300\"\n              height=\"300\"\n              className=\"rounded bg-gray-50\"\n            ></canvas>\n          </div>\n          <button\n            onClick={handleWebcam}\n            className={`bg-white rounded-md shadow text-lg py-3 w-full ${\n              webcam ? \"text-red-500\" : \"text-blue-500\"\n            } ${model ? \"hover:bg-gray-50\" : \"opacity-70 cursor-default\"}`}\n            disabled={!model}\n          >\n            {model ? (webcam ? \"Stop\" : \"Start\") : \"Setting up...\"}\n          </button>\n        </div>\n        {predictions && (\n          <div className=\"bg-white rounded-md shadow p-4 w-80 space-y-4\">\n            <div className=\"text-lg\">Classes</div>\n            <div className=\"space-y-3\">\n              {predictions.map(({ name, probability }, index) => (\n                <div key={index} className=\"space-y-2\">\n                  <div className=\"text-base text-gray-800\">{name}</div>\n                  <div\n                    className={`h-10 rounded w-full flex ${\n                      lightColors[index % lightColors.length]\n                    }`}\n                  >\n                    <div\n                      className={`rounded ${\n                        normalColors[index % normalColors.length]\n                      }`}\n                      style={{ width: probability * 100 + \"%\" }}\n                    ></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\n\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}