{"version":3,"sources":["components/App.js","index.js"],"names":["App","useState","webcam","setWebcam","model","setModel","predictions","setPredictions","predict","useCallback","a","canvas","prediction","i","getTotalClasses","push","name","className","probability","toFixed","loop","update","window","requestAnimationFrame","handleWebcam","document","getElementById","getContext","clearRect","width","height","stop","tmImage","useEffect","setup","play","startWebcam","URL","then","id","index","length","current","toUpperCase","getAlphabet","onClick","disabled","ReactDOM","render"],"mappings":"wWA8GeA,EA3GH,WAAO,IAAD,EACYC,mBAAS,MADrB,mBACTC,EADS,KACDC,EADC,OAEUF,mBAAS,MAFnB,mBAETG,EAFS,KAEFC,EAFE,OAGsBJ,mBAAS,MAH/B,mBAGTK,EAHS,KAGIC,EAHJ,KAKVC,EAAUC,sBAAW,sBAAC,gCAAAC,EAAA,0DACtBR,IAAUE,EADY,gCAECA,EAAMI,QAAQN,EAAOS,QAFtB,OAIxB,IAFMC,EAFkB,OAGlBN,EAAc,GACXO,EAAI,EAAGA,EAAIT,EAAMU,kBAAmBD,IAC3CP,EAAYS,KAAK,CACfC,KAAMJ,EAAWC,GAAGI,UACpBC,YAAaN,EAAWC,GAAGK,YAAYC,QAAQ,KAGnDZ,EAAeD,GAVS,2CAYzB,CAACJ,EAAQE,IAENgB,EAAOX,sBAAW,sBAAC,sBAAAC,EAAA,6DACvBR,EAAOmB,SADgB,SAEjBb,IAFiB,OAGvBc,OAAOC,sBAAsBH,GAHN,2CAItB,CAAClB,EAAQM,IAENgB,EAAY,uCAAG,4BAAAd,EAAA,0DACfR,EADe,uBAEbS,EAASc,SAASC,eAAe,UAC3Bf,EAAOgB,WAAW,MACxBC,UAAU,EAAG,EAAGjB,EAAOkB,MAAOlB,EAAOmB,QAJxB,SAKX5B,EAAO6B,OALI,OAMjB5B,EAAU,MANO,uBAQjBA,EAAU,IAAI6B,SAAe,IAAK,KAAK,IARtB,4CAAH,qDAiDlB,OArBAC,qBAAU,WACJ/B,EACe,uCAAG,sBAAAQ,EAAA,sEACZR,EAAOgC,QADK,uBAEZhC,EAAOiC,OAFK,OAGlBb,OAAOC,sBAAsBH,GAC7BlB,EAAOS,OAASc,SAASC,eAAe,UAJtB,2CAAH,oDAMjBU,GAEA7B,EAAe,QAEhB,CAACL,EAAQkB,IAEZa,qBAAU,WAIRD,OAFiBK,sEACGA,0EACgBC,MAAK,SAAClC,GAAD,OAAWC,EAASD,QAC5D,IAGD,qBAAKa,UAAU,2DAAf,SACE,sBAAKA,UAAU,oBAAf,UACE,sBAAKA,UAAU,2CAAf,UACE,qBAAKA,UAAU,UAAf,qBACA,wBACEsB,GAAG,SACHV,MAAM,MACNC,OAAO,MACPb,UAAU,0BAGbX,GACC,qBAAKW,UAAU,2CAAf,SACE,qBAAKA,UAAU,sBAAf,SACE,qBAAKA,UAAU,WAAf,SApDQ,WAGlB,IAFA,IAAIC,GAAe,EACfsB,GAAS,EACJ3B,EAAI,EAAGA,EAAIP,EAAYmC,OAAQ5B,IAAK,CAC3C,IAAI6B,EAAUpC,EAAYO,GACtB6B,EAAQxB,YAAcA,IACxBsB,EAAQ3B,EACRK,EAAcwB,EAAQxB,aAG1B,OAAc,GAAVsB,EACKlC,EAAYkC,GAAOxB,KAAK2B,cAE1BrC,EAAYA,EAAYmC,OAAS,GAAGzB,KAuCN4B,SAIjC,wBACEC,QAASrB,EACTP,UAAS,yDACPf,EAAS,eAAiB,gBADnB,YAELE,EAAQ,mBAAqB,6BACjC0C,UAAW1C,EALb,SAOGA,EAASF,EAAS,OAAS,QAAW,wBChGjD6C,IAASC,OAAO,cAAC,EAAD,IAASvB,SAASC,eAAe,W","file":"static/js/main.7a8c8705.chunk.js","sourcesContent":["import { useEffect, useState, useCallback } from \"react\";\nimport * as tmImage from \"@teachablemachine/image\";\n\nconst App = () => {\n  const [webcam, setWebcam] = useState(null);\n  const [model, setModel] = useState(null);\n  const [predictions, setPredictions] = useState(null);\n\n  const predict = useCallback(async () => {\n    if (webcam && model) {\n      const prediction = await model.predict(webcam.canvas);\n      const predictions = [];\n      for (let i = 0; i < model.getTotalClasses(); i++) {\n        predictions.push({\n          name: prediction[i].className,\n          probability: prediction[i].probability.toFixed(2),\n        });\n      }\n      setPredictions(predictions);\n    }\n  }, [webcam, model]);\n\n  const loop = useCallback(async () => {\n    webcam.update();\n    await predict();\n    window.requestAnimationFrame(loop);\n  }, [webcam, predict]);\n\n  const handleWebcam = async () => {\n    if (webcam) {\n      let canvas = document.getElementById(\"canvas\");\n      var ctx = canvas.getContext(\"2d\");\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      await webcam.stop();\n      setWebcam(null);\n    } else {\n      setWebcam(new tmImage.Webcam(300, 300, true));\n    }\n  };\n\n  const getAlphabet = () => {\n    let probability = -1;\n    let index = -1;\n    for (let i = 0; i < predictions.length; i++) {\n      let current = predictions[i];\n      if (current.probability > probability) {\n        index = i;\n        probability = current.probability;\n      }\n    }\n    if (index != -1) {\n      return predictions[index].name.toUpperCase();\n    }\n    return predictions[predictions.length - 1].name;\n  };\n\n  useEffect(() => {\n    if (webcam) {\n      const startWebcam = async () => {\n        await webcam.setup();\n        await webcam.play();\n        window.requestAnimationFrame(loop);\n        webcam.canvas = document.getElementById(\"canvas\");\n      };\n      startWebcam();\n    } else {\n      setPredictions(null);\n    }\n  }, [webcam, loop]);\n\n  useEffect(() => {\n    const URL = \"https://teachablemachine.withgoogle.com/models/6ZExbl23Z/\";\n    const modelURL = URL + \"model.json\";\n    const metadataURL = URL + \"metadata.json\";\n    tmImage.load(modelURL, metadataURL).then((model) => setModel(model));\n  }, []);\n\n  return (\n    <div className=\"bg-gray-200 h-screen w-full flex flex-col justify-center\">\n      <div className=\"mx-auto space-y-4\">\n        <div className=\"bg-white rounded-md shadow p-4 space-y-4\">\n          <div className=\"text-lg\">Preview</div>\n          <canvas\n            id=\"canvas\"\n            width=\"300\"\n            height=\"300\"\n            className=\"rounded bg-gray-50\"\n          ></canvas>\n        </div>\n        {predictions && (\n          <div className=\"bg-white rounded-md shadow p-4 space-y-4\">\n            <div className=\"flex justify-center\">\n              <div className=\"text-4xl\">{getAlphabet()}</div>\n            </div>\n          </div>\n        )}\n        <button\n          onClick={handleWebcam}\n          className={`bg-white rounded-md shadow text-lg py-3 w-full ${\n            webcam ? \"text-red-500\" : \"text-blue-500\"\n          } ${model ? \"hover:bg-gray-50\" : \"opacity-70 cursor-default\"}`}\n          disabled={!model}\n        >\n          {model ? (webcam ? \"Stop\" : \"Start\") : \"Setting up...\"}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\n\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}